From b80573b80dd42a5aa00c4d2f463e5fede1edfef0 Mon Sep 17 00:00:00 2001
From: Carlos Rafael Giani <dv@pseudoterminal.org>
Date: Thu, 25 Sep 2014 22:54:28 +0200
Subject: [PATCH] Add VPU video decode accelerator to Chromium GPU media
 stack

Upstream-Status: Inappropriate [other]
Upstream currently does not accept patches for video acceleration in Linux

Signed-off-by: Carlos Rafael Giani <dv@pseudoterminal.org>
---
 build/common.gypi                                  |  3 ++
 .../gpu/media/gpu_video_decode_accelerator.cc      |  7 +++++
 content/content_common.gypi                        | 34 ++++++++++++++++++++++
 gpu/config/software_rendering_list_json.cc         |  5 ++--
 ui/gl/gl_implementation.h                          |  4 +--
 5 files changed, 49 insertions(+), 4 deletions(-)

--- a/build/common.gypi
+++ b/build/common.gypi
@@ -1259,6 +1259,9 @@
     # Use system ICU instead of bundled one.
     'use_system_icu%' : 0,
 
+    # Whether or not the target platform is based on the i.MX SoC
+    'imx_platform%': 1,
+
     # Default to enabled PIE; this is important for ASLR but we may need to be
     # able to turn it off for various reasons.
     'linux_disable_pie%': 0,
--- a/content/common/gpu/media/gpu_video_decode_accelerator.h
+++ b/content/common/gpu/media/gpu_video_decode_accelerator.h
@@ -75,6 +75,7 @@
   class MessageFilter;
 
   scoped_ptr<media::VideoDecodeAccelerator> CreateDXVAVDA();
+  scoped_ptr<media::VideoDecodeAccelerator> CreateImxVpuVDA();
   scoped_ptr<media::VideoDecodeAccelerator> CreateV4L2VDA();
   scoped_ptr<media::VideoDecodeAccelerator> CreateV4L2SliceVDA();
   scoped_ptr<media::VideoDecodeAccelerator> CreateVaapiVDA();
--- a/content/common/gpu/media/gpu_video_decode_accelerator.cc
+++ b/content/common/gpu/media/gpu_video_decode_accelerator.cc
@@ -31,6 +31,8 @@
 #if defined(OS_WIN)
 #include "base/win/windows_version.h"
 #include "content/common/gpu/media/dxva_video_decode_accelerator.h"
+#elif defined(IMX_PLATFORM)
+#include "content/common/gpu/media/imxvpu_video_decode_accelerator.h"
 #elif defined(OS_MACOSX)
 #include "content/common/gpu/media/vt_video_decode_accelerator.h"
 #elif defined(OS_CHROMEOS)
@@ -256,6 +258,7 @@
   // same as the order of querying supported profiles of VDAs.
   const GpuVideoDecodeAccelerator::CreateVDAFp create_vda_fps[] = {
       &GpuVideoDecodeAccelerator::CreateDXVAVDA,
+      &GpuVideoDecodeAccelerator::CreateImxVpuVDA,
       &GpuVideoDecodeAccelerator::CreateV4L2VDA,
       &GpuVideoDecodeAccelerator::CreateV4L2SliceVDA,
       &GpuVideoDecodeAccelerator::CreateVaapiVDA,
@@ -296,6 +299,18 @@
   return decoder.Pass();
 }
 
+scoped_ptr<media::VideoDecodeAccelerator>
+GpuVideoDecodeAccelerator::CreateImxVpuVDA() {
+  scoped_ptr<media::VideoDecodeAccelerator> decoder;
+#if defined(IMX_PLATFORM)
+  DVLOG(0) << "Using the i.MX6 VPU decode accelerator";
+  decoder.reset(new ImxVpuVideoDecodeAccelerator(
+      stub_->decoder()->AsWeakPtr(),
+      make_context_current_));
+#endif
+  return decoder.Pass();
+}
+
 scoped_ptr<media::VideoDecodeAccelerator>
 GpuVideoDecodeAccelerator::CreateV4L2VDA() {
   scoped_ptr<media::VideoDecodeAccelerator> decoder;
@@ -414,6 +414,8 @@
   profiles = VTVideoDecodeAccelerator::GetSupportedProfiles();
 #elif defined(OS_ANDROID)
   profiles = AndroidVideoDecodeAccelerator::GetSupportedProfiles();
+#elif defined(IMX_PLATFORM)
+  profiles = ImxVpuVideoDecodeAccelerator::GetSupportedProfiles();
 #endif
   return GpuVideoAcceleratorUtil::ConvertMediaToGpuDecodeProfiles(profiles);
 }
--- a/content/content_common.gypi
+++ b/content/content_common.gypi
@@ -782,6 +782,40 @@
         'common/gpu/media/android_video_decode_accelerator.h',
       ],
     }],
+    ['target_arch == "arm" and imx_platform == 1', {
+      'dependencies': [
+        '../ui/gl/gl.gyp:gl',
+      ],
+      'variables': {
+        'conditions': [
+          ['sysroot!=""', {
+            'pkg-config': '../build/linux/pkg-config-wrapper "<(sysroot)" "<(target_arch)"',
+          }, {
+            'pkg-config': 'pkg-config'
+          }],
+        ],
+      },
+      'sources': [
+        'common/gpu/media/imx_gl_viv_direct_texture.cc',
+        'common/gpu/media/imx_gl_viv_direct_texture.h',
+        'common/gpu/media/imxvpucodec_fslwrapper.c',
+        'common/gpu/media/imxvpucodec.h',
+        'common/gpu/media/imxvpucodec_platform_chromium.cc',
+        'common/gpu/media/imxvpucodec_platform_chromium.h',
+        'common/gpu/media/imxvpucodec_platform.h',
+        'common/gpu/media/imxvpu_video_decode_accelerator.cc',
+        'common/gpu/media/imxvpu_video_decode_accelerator.h',
+      ],
+      'defines': ['IMX_PLATFORM'],
+      'cflags': [
+        '<!@(<(pkg-config) --cflags libfslvpuwrap)',
+      ],
+      'link_settings': {
+        'libraries': [
+          '<!@(<(pkg-config) --libs libfslvpuwrap)',
+        ],
+      },
+    }],
     ['OS=="android" and enable_webrtc==1', {
       'dependencies': [
         '../third_party/libyuv/libyuv.gyp:libyuv',
--- a/gpu/config/software_rendering_list_json.cc
+++ b/gpu/config/software_rendering_list_json.cc
@@ -480,7 +480,8 @@
         "all"
       ]
     },
-    {
+    // 48 disabled for i.MX6 integration
+/*    {
       "id": 48,
       "description": "Accelerated video decode is unavailable on Linux",
       "cr_bugs": [137247],
@@ -490,7 +491,7 @@
       "features": [
         "accelerated_video_decode"
       ]
-    },
+    },*/
     {
       "id": 49,
       "description": "NVidia GeForce GT 650M can cause the system to hang with flash 3D",
--- a/ui/gl/gl_implementation.h
+++ b/ui/gl/gl_implementation.h
@@ -96,7 +96,7 @@
 GLImplementation GetNamedGLImplementation(const std::string& name);
 
 // Get the name of a GL implementation.
-const char* GetGLImplementationName(GLImplementation implementation);
+GL_EXPORT const char* GetGLImplementationName(GLImplementation implementation);
 
 // Add a native library to those searched for GL entry points.
 void AddGLNativeLibrary(base::NativeLibrary library);
@@ -115,7 +115,7 @@
 // and when querying functions from the EGL library supplied by Android, it may
 // return a function that prints a log message about the function being
 // unsupported.
-void* GetGLProcAddress(const char* name);
+GL_EXPORT void* GetGLProcAddress(const char* name);
 
 // Return information about the GL window system binding implementation (e.g.,
 // EGL, GLX, WGL). Returns true if the information was retrieved successfully.
